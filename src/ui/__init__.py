from tkinter import Tk, Listbox, END, LEFT, TOP, Label, PhotoImage, StringVar, Button
from tkinter.filedialog import askopenfilename

from ui.view_model import ViewModel


class AppMain:
    def __init__(self, master: Tk, vm: ViewModel):
        self.master = master
        master.title("Let'sGO")

        vm.load_items()

        listbox = Listbox(master)
        for item in vm.items:
            listbox.insert(END, item.code)
        listbox.pack(side=LEFT, fill='y')

        def on_select(evt):
            w = evt.widget
            index = int(w.curselection()[0])
            item_code = w.get(index)
            label_str.set(item_code)
            label.update()

            img = vm.get_image(item_code)
            img2 = PhotoImage(file=img) if img else photo
            image.configure(image=img2)
            image.image = img2

        listbox.bind('<<ListboxSelect>>', on_select)

        label_str = StringVar()
        label = Label(master, textvariable=label_str)
        label.pack(side=TOP, fill='x')

        photo_data = """"""
        photo = PhotoImage(data=photo_data)
        image = Label(master, image=photo)
        image.image = photo
        image.pack(side=TOP)

        def on_set_new_photo():
            filename = askopenfilename()
            if not filename:
                return
            vm.save_image(label_str.get(), filename)

        button = Button(master, text='Set New Photo', command=on_set_new_photo)
        button.pack(side=TOP)
